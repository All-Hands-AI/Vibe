name: Backend Tests

on:
  workflow_call:

permissions:
  contents: read
  pull-requests: write
  issues: write
  repository-projects: read

jobs:
  backend-tests:
    name: Backend Unit Tests (Pytest)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Create virtual environment
        run: uv venv
        working-directory: backend

      - name: Install dependencies
        run: |
          source .venv/bin/activate
          # Install all dependencies (main + dev) from pyproject.toml
          uv pip install .[dev]
        working-directory: backend

      - name: Create test data directory
        run: mkdir -p /tmp/test-data
        
      - name: Run pytest with coverage (excluding E2E tests)
        run: |
          source .venv/bin/activate
          pytest --cov=. --cov-report=xml:coverage.xml --cov-report=html:htmlcov --cov-report=term-missing -v --ignore=tests/test_e2e_basic.py --ignore=tests/test_e2e_integrations.py --ignore=tests/test_e2e_apps.py --ignore=tests/test_e2e_riffs.py --ignore=tests/test_e2e_key_validation.py
        working-directory: backend
        env:
          DATA_DIR: /tmp/test-data

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: backend/
          flags: backend-unit
          name: backend-unit-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: backend/htmlcov/
          retention-days: 7

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: backend/coverage.xml
          retention-days: 7

      - name: Update PR description with backend coverage info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            // Load the PR description update script
            const fs = require('fs');
            const path = require('path');
            const scriptPath = path.join(process.cwd(), '.github/workflows/update-pr-description.js');
            const scriptContent = fs.readFileSync(scriptPath, 'utf8');
            eval(scriptContent);
            
            // Read coverage XML if available
            let coverageInfo = 'ðŸ“Š Backend unit test coverage report generated';
            try {
              const coverageXmlPath = 'backend/coverage.xml';
              if (fs.existsSync(coverageXmlPath)) {
                const xml = fs.readFileSync(coverageXmlPath, 'utf8');
                // Simple regex to extract coverage percentage from XML
                const lineRateMatch = xml.match(/line-rate="([0-9.]+)"/);
                const branchRateMatch = xml.match(/branch-rate="([0-9.]+)"/);
                
                if (lineRateMatch || branchRateMatch) {
                  const lineRate = lineRateMatch ? Math.round(parseFloat(lineRateMatch[1]) * 100) : 'N/A';
                  const branchRate = branchRateMatch ? Math.round(parseFloat(branchRateMatch[1]) * 100) : 'N/A';
                  
                  coverageInfo = `ðŸ“Š **Backend Unit Test Coverage**\n- **Lines:** ${lineRate}%\n- **Branches:** ${branchRate}%`;
                }
              }
            } catch (error) {
              console.log('Could not read coverage XML:', error.message);
            }
            
            const backendTestContent = `## âœ… Backend Unit Tests\n\n${coverageInfo}\n\n<sub>Backend unit tests via GitHub Actions â€¢ [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})</sub>`;
            
            // Update the PR description
            await updatePRDescription(github, context, 'backend-tests', backendTestContent);

      - name: Generate test summary
        if: always()
        run: |
          echo "## Backend Test Results (Unit Tests)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Unit tests completed (E2E tests run separately)" >> $GITHUB_STEP_SUMMARY
          echo "- ðŸ“Š Coverage report generated" >> $GITHUB_STEP_SUMMARY
          echo "- ðŸ”— E2E tests run in dedicated workflow" >> $GITHUB_STEP_SUMMARY
          if [ -f "backend/coverage.xml" ]; then
            echo "- ðŸ“ˆ Coverage details available in artifacts" >> $GITHUB_STEP_SUMMARY
          fi