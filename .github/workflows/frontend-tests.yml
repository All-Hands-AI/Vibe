name: Frontend Tests

on:
  workflow_call:

permissions:
  contents: read
  pull-requests: write
  issues: write
  repository-projects: read

jobs:
  frontend-tests:
    name: Frontend Tests (Vitest)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci
        working-directory: frontend

      - name: Run tests
        run: npm run test:run
        working-directory: frontend

      - name: Install coverage dependency
        run: npm install --save-dev @vitest/coverage-v8
        working-directory: frontend

      - name: Run tests with coverage
        run: npm run test:coverage
        working-directory: frontend

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: frontend/coverage/
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: frontend/coverage/
          retention-days: 7

      - name: Update PR description with coverage info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            // Load the PR description update script
            const fs = require('fs');
            const path = require('path');
            const scriptPath = path.join(process.cwd(), '.github/workflows/update-pr-description.js');
            const scriptContent = fs.readFileSync(scriptPath, 'utf8');
            eval(scriptContent);
            
            // Read coverage summary if available
            let coverageInfo = 'ðŸ“Š Coverage report generated';
            try {
              const coverageSummaryPath = 'frontend/coverage/coverage-summary.json';
              if (fs.existsSync(coverageSummaryPath)) {
                const coverageSummary = JSON.parse(fs.readFileSync(coverageSummaryPath, 'utf8'));
                const total = coverageSummary.total;
                if (total) {
                  const lines = total.lines ? `${total.lines.pct}%` : 'N/A';
                  const functions = total.functions ? `${total.functions.pct}%` : 'N/A';
                  const branches = total.branches ? `${total.branches.pct}%` : 'N/A';
                  const statements = total.statements ? `${total.statements.pct}%` : 'N/A';
                  
                  coverageInfo = `ðŸ“Š **Frontend Test Coverage**\n- **Lines:** ${lines}\n- **Functions:** ${functions}\n- **Branches:** ${branches}\n- **Statements:** ${statements}`;
                }
              }
            } catch (error) {
              console.log('Could not read coverage summary:', error.message);
            }
            
            const frontendTestContent = `## âœ… Frontend Tests\n\n${coverageInfo}\n\n<sub>Frontend tests via GitHub Actions â€¢ [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})</sub>`;
            
            // Update the PR description
            await updatePRDescription(github, context, 'frontend-tests', frontendTestContent);

      - name: Generate test summary
        if: always()
        run: |
          echo "## Frontend Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Vitest tests completed" >> $GITHUB_STEP_SUMMARY
          echo "- ðŸ“Š Coverage report generated" >> $GITHUB_STEP_SUMMARY
          if [ -f "frontend/coverage/coverage-summary.json" ]; then
            echo "- ðŸ“ˆ Coverage details available in artifacts" >> $GITHUB_STEP_SUMMARY
          fi