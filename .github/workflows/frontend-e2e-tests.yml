name: Frontend E2E Tests

on:
  workflow_call:

permissions:
  contents: read
  pull-requests: write
  issues: write
  repository-projects: read

jobs:
  frontend-e2e-tests:
    name: Frontend E2E Tests (Playwright)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci
        working-directory: frontend

      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        working-directory: frontend

      - name: Start backend server for e2e tests
        run: |
          cd backend
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          export MOCK_MODE=true
          export DATA_DIR=/tmp/test-data
          mkdir -p $DATA_DIR
          python app.py &
          echo $! > backend.pid
          sleep 5
        env:
          FLASK_ENV: test

      - name: Start frontend dev server
        run: |
          cd frontend
          npm run dev &
          echo $! > frontend.pid
          # Wait for server to be ready
          timeout 60 bash -c 'until curl -f http://localhost:5173; do sleep 2; done'
        env:
          NODE_ENV: test

      - name: Run Playwright tests
        run: npm run test:e2e
        working-directory: frontend
        env:
          CI: true

      - name: Stop servers
        if: always()
        run: |
          if [ -f backend/backend.pid ]; then
            kill $(cat backend/backend.pid) || true
            rm backend/backend.pid
          fi
          if [ -f frontend/frontend.pid ]; then
            kill $(cat frontend/frontend.pid) || true
            rm frontend/frontend.pid
          fi

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-test-results
          path: frontend/test-results/
          retention-days: 30

      - name: Comment test results on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Try to read test results
            let testSummary = '## 🎭 Playwright E2E Test Results\n\n';
            
            try {
              // Check if there are any test result files
              const testResultsDir = 'frontend/test-results';
              if (fs.existsSync(testResultsDir)) {
                const files = fs.readdirSync(testResultsDir);
                if (files.length > 0) {
                  testSummary += `- 📊 Test results generated (${files.length} test runs)\n`;
                } else {
                  testSummary += '- ✅ All tests passed\n';
                }
              } else {
                testSummary += '- ✅ All tests passed\n';
              }
              
              // Check if report exists
              if (fs.existsSync('frontend/playwright-report')) {
                testSummary += '- 📋 Detailed report available in artifacts\n';
              }
              
              testSummary += '\n📁 **Artifacts:**\n';
              testSummary += '- `playwright-report`: HTML test report\n';
              testSummary += '- `playwright-test-results`: Raw test results and screenshots\n';
              
            } catch (error) {
              testSummary += `- ❌ Error reading test results: ${error.message}\n`;
            }
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('🎭 Playwright E2E Test Results')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: testSummary
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: testSummary
              });
            }

      - name: Generate test summary
        if: always()
        run: |
          echo "## 🎭 Frontend E2E Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Playwright tests completed" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 Tests run against live frontend and backend" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Test report and artifacts uploaded" >> $GITHUB_STEP_SUMMARY
          
          # Add test file count
          if [ -d "frontend/e2e" ]; then
            TEST_COUNT=$(find frontend/e2e -name "*.spec.js" | wc -l)
            echo "- 📝 $TEST_COUNT test files executed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Add browser info
          echo "- 🌍 Tested on: Chromium, Firefox, WebKit" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 Tested on: Desktop and Mobile viewports" >> $GITHUB_STEP_SUMMARY