name: Backend E2E Tests

on:
  workflow_call:

permissions:
  contents: read
  pull-requests: write
  issues: write
  repository-projects: read

jobs:
  backend-e2e-tests:
    name: Backend E2E Tests (MOCK_MODE)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Create virtual environment
        run: uv venv
        working-directory: backend

      - name: Install dependencies
        run: |
          source .venv/bin/activate
          # Install all dependencies (main + dev) from pyproject.toml
          uv pip install .[dev]
        working-directory: backend

      - name: Run E2E tests with test runner
        run: |
          source .venv/bin/activate
          python run_e2e_tests.py --coverage
        working-directory: backend
        env:
          MOCK_MODE: true

      - name: Upload E2E test coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: backend/
          flags: backend-e2e
          name: backend-e2e-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload E2E coverage reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-e2e-coverage-report
          path: backend/htmlcov/
          retention-days: 7

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-e2e-test-results
          path: backend/coverage.xml
          retention-days: 7

      - name: Update PR description with E2E test info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            // Load the PR description update script
            const fs = require('fs');
            const path = require('path');
            const scriptPath = path.join(process.cwd(), '.github/scripts/update-pr-description.js');
            const scriptContent = fs.readFileSync(scriptPath, 'utf8');
            eval(scriptContent);
            
            // Read coverage XML if available
            let coverageInfo = 'ðŸ“Š E2E test coverage report generated';
            try {
              const coverageXmlPath = 'backend/coverage.xml';
              if (fs.existsSync(coverageXmlPath)) {
                const xml = fs.readFileSync(coverageXmlPath, 'utf8');
                // Simple regex to extract coverage percentage from XML
                const lineRateMatch = xml.match(/line-rate="([0-9.]+)"/);
                const branchRateMatch = xml.match(/branch-rate="([0-9.]+)"/);
                
                if (lineRateMatch || branchRateMatch) {
                  const lineRate = lineRateMatch ? Math.round(parseFloat(lineRateMatch[1]) * 100) : 'N/A';
                  const branchRate = branchRateMatch ? Math.round(parseFloat(branchRateMatch[1]) * 100) : 'N/A';
                  
                  coverageInfo = `ðŸ“Š **Backend E2E Test Coverage**
- **Lines:** ${lineRate}%
- **Branches:** ${branchRate}%`;
                }
              }
            } catch (error) {
              console.log('Could not read coverage XML:', error.message);
            }
            
            const backendE2EContent = `## ðŸ§ª Backend E2E Tests

âœ… E2E tests completed in MOCK_MODE
ðŸŽ­ All external APIs mocked (Anthropic, GitHub, Fly.io)

${coverageInfo}

**Test Coverage Areas:**
- Basic Endpoints: Health checks, hello endpoints
- API Key Management: Setting, validating, retrieving keys
- Apps Management: Creation, listing, deletion
- Riffs Management: Creation within apps, listing
- Key Validation: Mock and real mode validation logic

<sub>Backend E2E tests via GitHub Actions â€¢ [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})</sub>`;
            
            // Update the PR description
            await updatePRDescription(github, context, 'backend-e2e-tests', backendE2EContent);

      - name: Generate E2E test summary
        if: always()
        run: |
          echo "## Backend E2E Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… E2E tests completed in MOCK_MODE" >> $GITHUB_STEP_SUMMARY
          echo "- ðŸŽ­ All external APIs mocked (Anthropic, GitHub, Fly.io)" >> $GITHUB_STEP_SUMMARY
          echo "- ðŸ“Š Coverage report generated" >> $GITHUB_STEP_SUMMARY
          if [ -f "backend/coverage.xml" ]; then
            echo "- ðŸ“ˆ Coverage details available in artifacts" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- **Basic Endpoints**: Health checks, hello endpoints" >> $GITHUB_STEP_SUMMARY
          echo "- **API Key Management**: Setting, validating, retrieving keys" >> $GITHUB_STEP_SUMMARY
          echo "- **Apps Management**: Creation, listing, deletion" >> $GITHUB_STEP_SUMMARY
          echo "- **Riffs Management**: Creation within apps, listing" >> $GITHUB_STEP_SUMMARY
          echo "- **Key Validation**: Mock and real mode validation logic" >> $GITHUB_STEP_SUMMARY