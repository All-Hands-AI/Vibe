name: Build CLI Binary

on:
  pull_request:
    paths:
      - 'cli/**'
      - '.github/workflows/cli-build.yml'
  push:
    branches:
      - main
    paths:
      - 'cli/**'
      - '.github/workflows/cli-build.yml'

permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: read

jobs:
  build:
    name: Build CLI Binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            binary_name: openvibe-linux-x64
          - os: macos-latest
            platform: macos
            arch: x64
            binary_name: openvibe-macos-x64
          - os: macos-14
            platform: macos
            arch: arm64
            binary_name: openvibe-macos-arm64
          - os: windows-latest
            platform: windows
            arch: x64
            binary_name: openvibe-windows-x64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Create virtual environment and install dependencies
        run: |
          cd cli
          uv venv
          uv pip install -e .[build]

      - name: Build binary with PyInstaller (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd cli
          source .venv/bin/activate
          pyinstaller --onefile --name ${{ matrix.binary_name }} \
            --hidden-import=openvibe_cli.main \
            --hidden-import=openvibe_cli.config \
            --hidden-import=openvibe_cli.backend \
            --hidden-import=openvibe_cli.commands.setup \
            --hidden-import=openvibe_cli.commands.apps \
            --hidden-import=openvibe_cli.commands.riffs \
            --hidden-import=openvibe_cli.commands.chat \
            --hidden-import=openvibe_cli.commands.integrations \
            --hidden-import=openvibe_cli.commands.status \
            --hidden-import=openvibe_cli.backend_modules \
            --hidden-import=openvibe_cli.backend_modules.storage \
            --hidden-import=openvibe_cli.backend_modules.storage.apps_storage \
            --hidden-import=openvibe_cli.backend_modules.storage.riffs_storage \
            --hidden-import=openvibe_cli.backend_modules.storage.keys_storage \
            --hidden-import=openvibe_cli.backend_modules.storage.base_storage \
            --hidden-import=openvibe_cli.backend_modules.agent_loop \
            --hidden-import=openvibe_cli.backend_modules.utils \
            --hidden-import=openvibe_cli.backend_modules.utils.logging \
            --hidden-import=openvibe_cli.backend_modules.utils.repository \
            --hidden-import=rich.console \
            --hidden-import=rich.table \
            --hidden-import=rich.panel \
            --hidden-import=rich.progress \
            --hidden-import=prompt_toolkit \
            --hidden-import=click \
            --hidden-import=requests \
            --hidden-import=pydantic \
            openvibe_cli/main.py

      - name: Build binary with PyInstaller (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd cli
          .venv\Scripts\activate
          pyinstaller --onefile --name ${{ matrix.binary_name }} --hidden-import=openvibe_cli.main --hidden-import=openvibe_cli.config --hidden-import=openvibe_cli.backend --hidden-import=openvibe_cli.commands.setup --hidden-import=openvibe_cli.commands.apps --hidden-import=openvibe_cli.commands.riffs --hidden-import=openvibe_cli.commands.chat --hidden-import=openvibe_cli.commands.integrations --hidden-import=openvibe_cli.commands.status --hidden-import=openvibe_cli.backend_modules --hidden-import=openvibe_cli.backend_modules.storage --hidden-import=openvibe_cli.backend_modules.storage.apps_storage --hidden-import=openvibe_cli.backend_modules.storage.riffs_storage --hidden-import=openvibe_cli.backend_modules.storage.keys_storage --hidden-import=openvibe_cli.backend_modules.storage.base_storage --hidden-import=openvibe_cli.backend_modules.agent_loop --hidden-import=openvibe_cli.backend_modules.utils --hidden-import=openvibe_cli.backend_modules.utils.logging --hidden-import=openvibe_cli.backend_modules.utils.repository --hidden-import=rich.console --hidden-import=rich.table --hidden-import=rich.panel --hidden-import=rich.progress --hidden-import=prompt_toolkit --hidden-import=click --hidden-import=requests --hidden-import=pydantic openvibe_cli/main.py

      - name: Test binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd cli/dist
          ./${{ matrix.binary_name }} --version
          ./${{ matrix.binary_name }} --help

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: cli/dist/${{ matrix.binary_name }}
          retention-days: 30

  comment:
    name: Post Download Links
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f -name "openvibe-*" -exec ls -la {} \;

      - name: Post comment with download links
        uses: actions/github-script@v7
        with:
          script: |
            const runId = context.runId;
            const repo = context.repo;
            
            // Get artifacts for this run
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: repo.owner,
              repo: repo.repo,
              run_id: runId
            });
            
            // Create download URLs for each platform
            const platforms = [
              { name: 'Linux x64', artifact: 'openvibe-linux-x64' },
              { name: 'macOS x64', artifact: 'openvibe-macos-x64' },
              { name: 'macOS ARM64', artifact: 'openvibe-macos-arm64' },
              { name: 'Windows x64', artifact: 'openvibe-windows-x64.exe' }
            ];
            
            let comment = `## ðŸš€ CLI Binaries Available\n\n`;
            
            // Add individual download links
            for (const platform of platforms) {
              const artifact = artifacts.data.artifacts.find(a => a.name === platform.artifact);
              if (artifact) {
                // GitHub Actions artifact download URL format
                const downloadUrl = `https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId}/artifacts/${artifact.id}`;
                comment += `ðŸ“¦ **[${platform.name}](${downloadUrl})**\n`;
              }
            }
            
            comment += `\n**Quick start:** Download, \`chmod +x\`, move to PATH, run \`openvibe --help\`\n\n`;
            comment += `*Binaries expire in 30 days*`;
            
            // Post the comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: repo.owner,
              repo: repo.repo,
              body: comment
            });

  release:
    name: Create Release Assets
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release tag
        id: tag
        run: |
          # Create a tag based on the current date and commit
          TAG="cli-v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          git tag $TAG
          git push origin $TAG

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: "OpenVibe CLI ${{ steps.tag.outputs.tag }}"
          body: |
            ## OpenVibe CLI Binary Release
            
            ðŸ¤™ Standalone binaries for the OpenVibe CLI with 1:1 frontend parity.
            
            ### Downloads
            - **Linux (x64)**: `openvibe-linux-x64`
            - **macOS (x64)**: `openvibe-macos-x64`
            - **macOS (ARM64)**: `openvibe-macos-arm64`
            - **Windows (x64)**: `openvibe-windows-x64.exe`
            
            ### Installation
            1. Download the binary for your platform
            2. Make executable (Unix/macOS): `chmod +x openvibe-*`
            3. Move to PATH: `sudo mv openvibe-* /usr/local/bin/openvibe`
            4. Run: `openvibe --help`
            
            ### Features
            - Apps and riffs management
            - Interactive chat interface
            - Configuration and setup
            - Status monitoring
            - Beautiful terminal UI
            
            Built from commit: ${{ github.sha }}
          files: |
            artifacts/openvibe-linux-x64/openvibe-linux-x64
            artifacts/openvibe-macos-x64/openvibe-macos-x64
            artifacts/openvibe-macos-arm64/openvibe-macos-arm64
            artifacts/openvibe-windows-x64.exe/openvibe-windows-x64.exe
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}