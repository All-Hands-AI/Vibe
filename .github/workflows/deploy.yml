name: Deploy to Fly.io

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:run

      - name: Build application
        run: npm run build

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Determine deployment environment
        id: deployment-env
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "app_name=openvibe" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "is_production=true" >> $GITHUB_OUTPUT
          else
            # For PRs and feature branches, create a unique app name
            branch_name="${{ github.head_ref || github.ref_name }}"
            # Clean branch name for fly.io app naming (lowercase, alphanumeric and hyphens only)
            clean_branch=$(echo "$branch_name" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
            # Truncate to 30 chars to stay within fly.io limits
            clean_branch=$(echo "$clean_branch" | cut -c1-30 | sed 's/-$//')
            echo "app_name=openvibe-$clean_branch" >> $GITHUB_OUTPUT
            echo "environment=preview" >> $GITHUB_OUTPUT
            echo "is_production=false" >> $GITHUB_OUTPUT
            echo "branch_name=$clean_branch" >> $GITHUB_OUTPUT
          fi

      - name: Create fly.toml for feature deployment
        if: steps.deployment-env.outputs.is_production == 'false'
        run: |
          cp fly.toml fly-feature.toml
          sed -i "s/app = 'openvibe'/app = '${{ steps.deployment-env.outputs.app_name }}'/" fly-feature.toml

      - name: Deploy to production
        if: steps.deployment-env.outputs.is_production == 'true'
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy to feature environment
        if: steps.deployment-env.outputs.is_production == 'false'
        run: |
          # Create the app if it doesn't exist
          flyctl apps create ${{ steps.deployment-env.outputs.app_name }} --org personal || true
          # Deploy using the feature-specific config
          flyctl deploy --config fly-feature.toml --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Get deployment URL
        id: deployment-url
        run: |
          if [[ "${{ steps.deployment-env.outputs.is_production }}" == "true" ]]; then
            echo "url=https://openvibe.fly.dev" >> $GITHUB_OUTPUT
          else
            echo "url=https://${{ steps.deployment-env.outputs.app_name }}.fly.dev" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deployment-url.outputs.url }}';
            const environment = '${{ steps.deployment-env.outputs.environment }}';
            const appName = '${{ steps.deployment-env.outputs.app_name }}';
            
            // Check if we already commented on this PR
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸš€ Deployment Status')
            );
            
            const commentBody = `## ðŸš€ Deployment Status
            
            **Environment:** \`${environment}\`
            **App Name:** \`${appName}\`
            **Status:** âœ… Successfully deployed
            
            ### ðŸ”— Preview URL
            **[Visit deployment â†’](${deploymentUrl})**
            
            ---
            
            This deployment will be automatically cleaned up when the PR is closed.
            
            <sub>Deployed via GitHub Actions â€¢ [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})</sub>`;
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  cleanup:
    name: Cleanup feature deployments
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    
    steps:
      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Delete feature app
        run: |
          branch_name="${{ github.head_ref }}"
          clean_branch=$(echo "$branch_name" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          clean_branch=$(echo "$clean_branch" | cut -c1-30 | sed 's/-$//')
          app_name="openvibe-$clean_branch"
          
          # Delete the app (this will also delete all associated resources)
          flyctl apps destroy $app_name --yes || echo "App $app_name may not exist or already deleted"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Comment cleanup status
        uses: actions/github-script@v7
        with:
          script: |
            const branch_name = '${{ github.head_ref }}';
            const clean_branch = branch_name.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '').substring(0, 30).replace(/-$/, '');
            const app_name = `openvibe-${clean_branch}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ðŸ§¹ Deployment Cleanup
              
              The feature deployment \`${app_name}\` has been automatically destroyed since this PR was closed.
              
              <sub>Cleaned up via GitHub Actions â€¢ [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})</sub>`
            });