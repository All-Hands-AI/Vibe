name: Deploy to Fly.io

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Determine deployment environment
        id: deployment-env
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "app_name=openvibe" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "is_production=true" >> $GITHUB_OUTPUT
          else
            # For PRs and feature branches, create a unique app name using the reusable script
            branch_name="${{ github.head_ref || github.ref_name }}"
            app_name=$(./.github/scripts/get-app-name.sh "$branch_name")
            echo "app_name=$app_name" >> $GITHUB_OUTPUT
            echo "environment=preview" >> $GITHUB_OUTPUT
            echo "is_production=false" >> $GITHUB_OUTPUT
          fi

      - name: Create fly.toml for feature deployment
        if: steps.deployment-env.outputs.is_production == 'false'
        run: |
          cp fly.toml fly-feature.toml
          sed -i "s/app = 'openvibe'/app = '${{ steps.deployment-env.outputs.app_name }}'/" fly-feature.toml

      - name: Create volumes for production
        if: steps.deployment-env.outputs.is_production == 'true'
        run: |
          # Create volumes if they don't exist (ignore errors if they already exist)
          flyctl volume create data_volume -r ewr -n 2 -a openvibe || true
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy to production
        if: steps.deployment-env.outputs.is_production == 'true'
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy to feature environment
        if: steps.deployment-env.outputs.is_production == 'false'
        run: |
          # Create the app if it doesn't exist
          flyctl apps create ${{ steps.deployment-env.outputs.app_name }} --org personal || true
          # Create volumes if they don't exist (ignore errors if they already exist)
          flyctl volume create data_volume -r ewr -n 2 -a ${{ steps.deployment-env.outputs.app_name }} || true
          # Set environment variable for development mode with git watcher
          flyctl secrets set PULL_FROM_BRANCH="${{ github.head_ref || github.ref_name }}" -a ${{ steps.deployment-env.outputs.app_name }}
          # Deploy using the feature-specific config
          flyctl deploy --config fly-feature.toml --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Get deployment URL
        id: deployment-url
        run: |
          if [[ "${{ steps.deployment-env.outputs.is_production }}" == "true" ]]; then
            echo "url=https://openvibe.fly.dev" >> $GITHUB_OUTPUT
          else
            echo "url=https://${{ steps.deployment-env.outputs.app_name }}.fly.dev" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: KeisukeYamashita/create-comment@v1
        with:
          comment: |
            ## 🚀 Deployment Status
            
            **Environment:** `${{ steps.deployment-env.outputs.environment }}`
            **App Name:** `${{ steps.deployment-env.outputs.app_name }}`
            **Status:** ✅ Successfully deployed
            **Mode:** 🔥 Development mode with hot-reload enabled
            
            ### 🔗 Preview URL
            **[Visit deployment →](${{ steps.deployment-url.outputs.url }})**
            
            ### 🛠️ Development Features
            - **Hot-reload enabled** for React (Vite dev server on port 3000)
            - **Git watcher active** - automatically pulls from `${{ github.head_ref || github.ref_name }}` branch
            - **Flask debug mode** for Python backend (port 8000)
            - **Live updates** when you push changes to this branch
            
            ### 📊 Fly.io Management
            - **[View App Status →](https://fly.io/apps/${{ steps.deployment-env.outputs.app_name }})**
            - **[View Metrics →](https://fly.io/apps/${{ steps.deployment-env.outputs.app_name }}/metrics)**
            - **[View Monitoring →](https://fly.io/apps/${{ steps.deployment-env.outputs.app_name }}/monitoring)**
            
            ---
            
            This deployment will be automatically cleaned up when the PR is closed.
            
            <sub>Deployed via GitHub Actions • [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})</sub>
          unique: true